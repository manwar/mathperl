# [[[ HEADER ]]]
package MathPerl::Arithmetic::ApproximatelyEqual;
use strict;
use warnings;
use RPerl::AfterSubclass;
our $VERSION = 0.001_000;

# [[[ CRITICS ]]]
## no critic qw(ProhibitStringyEval)  # SYSTEM DEFAULT 1: allow eval()

# [[[ INCLUDES ]]]
use RPerl::Inline;
use MathPerl::Config;

# [[[ SUBROUTINES ]]]

# <<< OO PROPERTIES, SUBROUTINES, SHIMS >>>
undef &MathPerl::Arithmetic::ApproximatelyEqual::approximately_equal;
*MathPerl::Arithmetic::ApproximatelyEqual::approximately_equal = sub { return main::MathPerl__Arithmetic__ApproximatelyEqual__approximately_equal(@ARG); };

# <<< C++ LOADER >>>
#our void::method $cpp_load = sub {
sub cpp_load {
    my $need_load_cpp = 0;
    if (    ( exists $main::{'MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID'} )
        and ( defined &{ $main::{'MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID'} } ) )
    {
#RPerl::diag('in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load, MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID() exists & defined' . "\n");
#RPerl::diag(q{in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load, have MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID() retval = '} . main::MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID() . q{'} . "\n");
        if ( $RPerl::MODES->{ main::MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID() }->{ops} ne 'CPP' ) {
            $need_load_cpp = 1;
        }
    }
    else {
  #RPerl::diag('in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load, MathPerl__Arithmetic__ApproximatelyEqual__MODE_ID() does not exist or undefined' . "\n");
        $need_load_cpp = 1;
    }

    if ($need_load_cpp) {

        #RPerl::diag('in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load, need load CPP code' . "\n");

        my $eval_string = <<"EOF";
package main;
use RPerl::Inline;
BEGIN { RPerl::diag("[[[ BEGIN 'use Inline' STAGE for 'MathPerl/Arithmetic/ApproximatelyEqual.cpp' ]]]\n" x 1); }
use Inline (CPP => '$main::INCLUDE_PATH' . '/MathPerl/Arithmetic/ApproximatelyEqual.cpp', \%RPerl::Inline::ARGS);
RPerl::diag("[[[ END   'use Inline' STAGE for 'MathPerl/Arithmetic/ApproximatelyEqual.cpp' ]]]\n" x 1);
1;
EOF

        $RPerl::Inline::ARGS{ccflagsex}
            = $RPerl::Inline::CCFLAGSEX . $RPerl::TYPES_CCFLAG . rperltypes::type_integer_native_ccflag() . rperltypes::type_number_native_ccflag();
        $RPerl::Inline::ARGS{cppflags} = $RPerl::TYPES_CCFLAG . rperltypes::type_integer_native_ccflag() . rperltypes::type_number_native_ccflag();

#RPerl::diag('in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load(), CPP not yet loaded, about to call eval() on $eval_string =' . "\n" . '<<< BEGIN EVAL STRING>>>' . "\n" . $eval_string . '<<< END EVAL STRING >>>' . "\n");

        eval $eval_string or croak( $OS_ERROR . "\n" . $EVAL_ERROR );
        if ($EVAL_ERROR) { croak($EVAL_ERROR); }
    }

    #else { RPerl::diag('in MathPerl::Arithmetic::ApproximatelyEqual::cpp_load(), CPP already loaded, DOING NOTHING' . "\n"); }
}

# DEV NOTE, CORRELATION #rp15: suppress 'Too late to run INIT block' at run-time loading via require or eval
no warnings;
INIT {
    # actually compile and load C++ code when 'use MathPerl::Arithmetic::ApproximatelyEqual' is called
    MathPerl::Arithmetic::ApproximatelyEqual::cpp_load();
}
use warnings;

1;    # end of package


# [[[ EXPORT SUBROUTINES TO main:: NAMESPACE ]]]

# [[[ HEADER ]]]
package main;
use strict;
use warnings;
use RPerl::AfterSubclass;
our $VERSION = 0.001_000;

# [[[ SUBROUTINES ]]]

# <<< OO PROPERTIES, SUBROUTINES, SHIMS >>>
undef &main::approximately_equal;
*main::approximately_equal = sub { return main::MathPerl__Arithmetic__ApproximatelyEqual__approximately_equal(@ARG); };
1;    # end of package
