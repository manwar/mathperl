// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__MathPerl__DataStructure__Vector_h
#define __CPP__INCLUDED__MathPerl__DataStructure__Vector_h 0.001_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperltypes.h; HelperFunctions.cpp)
#include "MathPerl/DataStructure.cpp"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class MathPerl__DataStructure__Vector : public MathPerl__DataStructure {
public:
    // [[[ OO PROPERTIES ]]]
    number_arrayref head;

    // [[[ OO METHODS ]]]

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    number_arrayref get_head() { /* cout << "in Vector.h get_head()..." << endl; */ return this->head; }
    void set_head(number_arrayref head_new) { this->head = head_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    MathPerl__DataStructure__Vector() { cout << "in Vector.h Vector() constructor..." << endl; }
    ~MathPerl__DataStructure__Vector() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "MathPerl::DataStructure::Vector"; }

    // <<< USER-DEFINED METHODS >>>
    string To_string();
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define MathPerl__DataStructure__Vector_rawptr MathPerl__DataStructure__Vector*
typedef std::unique_ptr<MathPerl__DataStructure__Vector> MathPerl__DataStructure__Vector_ptr;
typedef std::vector<MathPerl__DataStructure__Vector_ptr> MathPerl__DataStructure__Vector_arrayref;
typedef std::unordered_map<string, MathPerl__DataStructure__Vector_ptr> MathPerl__DataStructure__Vector_hashref;
typedef std::unordered_map<string, MathPerl__DataStructure__Vector_ptr>::iterator MathPerl__DataStructure__Vector_hashref_iterator;

// [[[ SUBROUTINES ]]]
//string MathPerl__DataStructure__Vector__Vector_to_string(MathPerl__DataStructure__Vector input_vector);  // DOES NOT WORK
string MathPerl__DataStructure__Vector__Vector_to_string(MathPerl__DataStructure__Vector_rawptr input_vector_rawptr);
MathPerl__DataStructure__Vector_rawptr MathPerl__DataStructure__Vector__test_constructor(integer i, const char* CLASS);

// <<< SHIM MACROS >>>
#define Vector_to_string(input_vector) MathPerl__DataStructure__Vector__Vector_to_string(input_vector)

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer MathPerl__DataStructure__Vector__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class


// [[[ ADDITIONAL CLASSES ]]]

// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__Vector_h
#define __CPP__INCLUDED__Vector_h 0.001_000

// [[[ INCLUDES & OO INHERITANCE INCLUDES ]]]
#include <RPerl.cpp>  // -> RPerl.h -> (rperltypes_mode.h; rperltypes.h; HelperFunctions.cpp)

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class Vector : public MathPerl__DataStructure__Vector {
public:
    // [[[ OO METHODS ]]]

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    Vector() {}
    ~Vector() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "Vector"; }
};  // end of class

// [[[ OO SUBCLASSES ]]]
#define Vector_rawptr Vector*
typedef std::unique_ptr<Vector> Vector_ptr;
typedef std::vector<Vector_ptr> Vector_arrayref;
typedef std::unordered_map<string, Vector_ptr> Vector_hashref;
typedef std::unordered_map<string, Vector_ptr>::iterator Vector_hashref_iterator;

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer Vector__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
