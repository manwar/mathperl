// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__MathPerl__LinearAlgebra__AddVectorVector_cpp
#define __CPP__INCLUDED__MathPerl__LinearAlgebra__AddVectorVector_cpp 0.002_000

// [[[ INCLUDES ]]]
#include "MathPerl/LinearAlgebra/AddVectorVector.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

MathPerl__DataStructure__Vector_rawptr MathPerl__LinearAlgebra__AddVectorVector__add_vector_vector(MathPerl__DataStructure__Vector_rawptr input_0, MathPerl__DataStructure__Vector_rawptr input_1, const char* CLASS) {
    MathPerl__DataStructure__Vector_rawptr return_value = new MathPerl__DataStructure__Vector;
    return_value->head = add_vector_vector_raw(input_0->head, input_1->head);
    return return_value;
}

number_arrayref MathPerl__LinearAlgebra__AddVectorVector__add_vector_vector_raw(number_arrayref input_0, number_arrayref input_1) {
    integer i;
    integer input_0_dimensionality = input_0.size();
    integer input_1_dimensionality = input_1.size();

    if ( input_0_dimensionality != input_1_dimensionality ) {
        Die( "ERROR EMPLAADVV00: Dimensionality mismatch, input Vector 0 raw number_arrayref contains ", input_0_dimensionality, " elements and input Vector 1 raw number_arrayref contains ", input_1_dimensionality, " elements, dying", "\n" );
    }

    number_arrayref return_value;
    return_value.resize(input_0_dimensionality);

    for ( i = 0; i < input_0_dimensionality; i++ ) {
        return_value[i] = input_0[i] + input_1[i];
    }
    return return_value;
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
