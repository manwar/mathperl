// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__MathPerl__DataStructure__Vector_cpp
#define __CPP__INCLUDED__MathPerl__DataStructure__Vector_cpp 0.001_000

// [[[ INCLUDES ]]]
#include "MathPerl/DataStructure/Vector.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

string MathPerl__DataStructure__Vector::To_string() {
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector::To_string()..." << endl;
    return number_arrayref_to_string(this->head);
}

string MathPerl__DataStructure__Vector__Vector_to_string(MathPerl__DataStructure__Vector_rawptr input_vector_rawptr) {
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector__Vector_to_string() rawptr..." << endl;
    return number_arrayref_to_string(input_vector_rawptr->head);
}

MathPerl__DataStructure__Vector_rawptr MathPerl__DataStructure__Vector__test_constructor(integer i, const char* CLASS) {
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), top of subroutine" << endl;
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), have CLASS = " << CLASS << endl;
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), have i = " << i << endl;

    MathPerl__DataStructure__Vector_rawptr retval = new MathPerl__DataStructure__Vector;

    retval->head.resize(i);
    for (integer j = 0; j < i; j++) {
//        cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), top of loop j = " << j << endl;
        retval->head[j] = j * 5;
//        cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), bottom of loop j = " << j << ", set retval->head[j] = " << retval->head[j] << endl;
    }
//    cout << "in Vector.cpp MathPerl__DataStructure__Vector__test_constructor(), bottom of subroutine" << endl;

    return retval;
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class


// [[[ ADDITIONAL CLASSES ]]]

// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__Vector_cpp
#define __CPP__INCLUDED__Vector_cpp 0.001_000

// [[[ INCLUDES ]]]
#include "MathPerl/DataStructure/Vector.h"

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif

// end of class
