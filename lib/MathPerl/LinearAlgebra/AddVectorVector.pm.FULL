## no critic qw(ProhibitUselessNoCritic PodSpelling)  # DEVELOPER DEFAULT 1a: allow unreachable & POD-commented code, must be on line 1

# [[[ HEADER ]]]
use RPerl;
package MathPerl::LinearAlgebra::AddVectorVector;
use strict;
use warnings;
our $VERSION = 0.002_000;

# [[[ OO INHERITANCE ]]]
use parent qw(MathPerl::Operation);
use MathPerl::Operation;

# [[[ CRITICS ]]]
## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)  # USER DEFAULT 1: allow numeric values & print operator
## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters & sigils
## no critic qw(ProhibitUnreachableCode RequirePodSections RequirePodAtEnd)  # DEVELOPER DEFAULT 1b: allow POD & unreachable or POD-commented code, must be after line 1

# [[[ INCLUDES ]]]
use MathPerl::DataStructure::Vector;
#use MathPerl::DataStructure::VectorBound;
#use MathPerl::DataStructure::Vector3D;
#use MathPerl::DataStructure::Vector3DBound;
use MathPerl::Arithmetic::ApproximatelyEqual;

# [[[ OO PROPERTIES ]]]
our hashref $properties = {};

# [[[ OO METHODS & SUBROUTINES ]]]

=NEED_ENABLE

our MathPerl::DataStructure::Vector3DBound $add_vector_3d_bound_vector_3d_bound = sub {
    (   my MathPerl::DataStructure::Vector3DBound $input_0,
        my MathPerl::DataStructure::Vector3DBound $input_1
    ) = @_;

    if (not approximately_equal($input_0->{tail_x}, $input_1->{tail_x})) {
        die 'ERROR EMPLAADVV03: Tail value mismatch, input vector 0 tail element x contains value ' . $input_0->{tail_x} .
            ' and input vector 1 tail element x contains value ' . $input_1->{tail_x} .
            ', can not add together bound vectors with unequal tails, dying' . "\n";
    }

    if (not approximately_equal($input_0->{tail_y}, $input_1->{tail_y})) {
        die 'ERROR EMPLAADVV03: Tail value mismatch, input vector 0 tail element y contains value ' . $input_0->{tail_y} .
            ' and input vector 1 tail element y contains value ' . $input_1->{tail_y} .
            ', can not add together bound vectors with unequal tails, dying' . "\n";
    }

    if (not approximately_equal($input_0->{tail_z}, $input_1->{tail_z})) {
        die 'ERROR EMPLAADVV03: Tail value mismatch, input vector 0 tail element z contains value ' . $input_0->{tail_z} .
            ' and input vector 1 tail element z contains value ' . $input_1->{tail_z} .
            ', can not add together bound vectors with unequal tails, dying' . "\n";
    }

    my MathPerl::DataStructure::Vector3DBound $return_value = MathPerl::DataStructure::Vector3DBound->new();
    $return_value->{tail_x} = $input_0->{tail_x};
    $return_value->{tail_y} = $input_0->{tail_y};
    $return_value->{tail_z} = $input_0->{tail_z};

    $return_value->{head_x} = $input_0->{head_x} + $input_1->{head_x};
    $return_value->{head_y} = $input_0->{head_y} + $input_1->{head_y};
    $return_value->{head_z} = $input_0->{head_z} + $input_1->{head_z};
 
    return $return_value;
};

our MathPerl::DataStructure::Vector3D $add_vector3d_vector3d = sub {
    (   my MathPerl::DataStructure::Vector3D $input_0,
        my MathPerl::DataStructure::Vector3D $input_1
    ) = @_;

    my MathPerl::DataStructure::Vector3D $return_value = MathPerl::DataStructure::Vector3D->new();

    $return_value->{x} = $input_0->{x} + $input_1->{x};
    $return_value->{y} = $input_0->{y} + $input_1->{y};
    $return_value->{z} = $input_0->{z} + $input_1->{z};

    return $return_value;
};

our MathPerl::DataStructure::VectorBound $add_vector_bound_vector_bound = sub {
    (   my MathPerl::DataStructure::VectorBound $input_0,
        my MathPerl::DataStructure::VectorBound $input_1
    ) = @_;

    my integer $input_0_tail_dimensionality = scalar @{$input_0->{tail}};
    my integer $input_1_tail_dimensionality = scalar @{$input_1->{tail}};

    if ($input_0_tail_dimensionality != $input_1_tail_dimensionality) {
        die 'ERROR EMPLAADVV01: Dimensionality mismatch, input VectorBound 0 tail contains ' . $input_0_tail_dimensionality .
            ' elements and input VectorBound 1 tail contains ' . $input_1_tail_dimensionality . ' elements, dying' . "\n";
    }

    for my integer $i (0 .. ($input_0_tail_dimensionality - 1)) {
        if (not approximately_equal($input_0->{tail}->[$i], $input_1->{tail}->[$i])) {
            die 'ERROR EMPLAADVV02: Tail value mismatch, input VectorBound 0 tail element ' . $i . ' contains value ' . $input_0->{tail}->[$i] .
                ' and input VectorBound 1 tail element ' . $i . ' contains value ' . $input_1->{tail}->[$i] .
                ', can not add together bound vectors with unequal tails, dying' . "\n";
        }
    }

    my MathPerl::DataStructure::VectorBound $return_value = MathPerl::DataStructure::VectorBound->new();
    $return_value->{tail} = $input_0->{tail};
    $return_value->{head} = add_vector_vector_raw($input_0->{head}, $input_1->{head});
    return $return_value;
};

=cut

our MathPerl::DataStructure::Vector $add_vector_vector = sub {
    (   my MathPerl::DataStructure::Vector $input_0,
        my MathPerl::DataStructure::Vector $input_1
    ) = @_;
    my MathPerl::DataStructure::Vector $return_value = MathPerl::DataStructure::Vector->new();
    $return_value->{head} = add_vector_vector_raw($input_0->{head}, $input_1->{head});
    return $return_value;
};

our number_arrayref $add_vector_vector_raw = sub {
    (   my number_arrayref $input_0,
        my number_arrayref $input_1
    ) = @_;

    my integer $input_0_dimensionality = scalar @{$input_0};
    my integer $input_1_dimensionality = scalar @{$input_1};

    if ($input_0_dimensionality != $input_0_dimensionality) {
        die 'ERROR EMPLAADVV00: Dimensionality mismatch, input Vector 0 raw number_arrayref contains ' . $input_0_dimensionality .
            ' elements and input Vector 1 raw number_arrayref contains ' . $input_1_dimensionality . ' elements, dying' . "\n";
    }

    my number_arrayref $return_value = [];

    for my integer $i (0 .. ($input_0_dimensionality - 1)) {
        $return_value->[$i] = $input_0->[$i] + $input_1->[$i];
    }

    return $return_value;
};

1;  # end of class
